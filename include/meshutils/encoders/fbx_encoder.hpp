////////////////////////////////////////////////////////////////////////////////
//
// (C) Andy Thomason 2016
//
// Fbx file encoder
// 

#ifndef VKU_fbx_encoder_INCLUDED
#define VKU_fbx_encoder_INCLUDED

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <exception>
#include <cstring>

#include <glm/glm.hpp>
#include <meshutils/mesh.hpp>

// see https://code.blender.org/2013/08/fbx-binary-file-format-specification/
// and https://banexdevblog.wordpress.com/2014/06/23/a-quick-tutorial-about-the-fbx-ascii-format/

namespace meshutils {

  class fbx_encoder {
  public:
    fbx_encoder() {
      static const uint8_t fbx_header[] = {
        0x4b, 0x61, 0x79, 0x64, 0x61, 0x72, 0x61, 0x20, 0x46, 0x42, 0x58, 0x20,
        0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x20, 0x00, 0x1a, 0x00, 0xe8,
        0x1c, 0x00, 0x00
      };
      bytes_.reserve(0x10000);
      bytes_.assign(fbx_header, fbx_header + sizeof(fbx_header));

begin("FBXHeaderExtension");
  begin("FBXHeaderVersion");
    I(1003);
  end("FBXHeaderVersion");
  begin("FBXVersion");
    I(7400);
  end("FBXVersion");
  begin("EncryptionType");
    I(0);
  end("EncryptionType");
  begin("CreationTimeStamp");
    begin("Version");
      I(1000);
    end("Version");
    begin("Year");
      I(2016);
    end("Year");
    begin("Month");
      I(7);
    end("Month");
    begin("Day");
      I(25);
    end("Day");
    begin("Hour");
      I(19);
    end("Hour");
    begin("Minute");
      I(4);
    end("Minute");
    begin("Second");
      I(5);
    end("Second");
    begin("Millisecond");
      I(805);
    end("Millisecond");
  end("CreationTimeStamp");
  begin("Creator");
    S("Blender (stable FBX IO) - 2.76 (sub 0) - 3.6.2");
  end("Creator");
  begin("SceneInfo");
    S("GlobalInfo\x00\x01SceneInfo", 21);
    S("UserData");
    begin("Type");
      S("UserData");
    end("Type");
    begin("Version");
      I(100);
    end("Version");
    begin("MetaData");
      begin("Version");
        I(100);
      end("Version");
      begin("Title");
        S("");
      end("Title");
      begin("Subject");
        S("");
      end("Subject");
      begin("Author");
        S("");
      end("Author");
      begin("Keywords");
        S("");
      end("Keywords");
      begin("Revision");
        S("");
      end("Revision");
      begin("Comment");
        S("");
      end("Comment");
    end("MetaData");
    begin("Properties70");
      begin("P");
        S("DocumentUrl");
        S("KString");
        S("Url");
        S("");
        S("/foobar.fbx");
      end("P");
      begin("P");
        S("SrcDocumentUrl");
        S("KString");
        S("Url");
        S("");
        S("/foobar.fbx");
      end("P");
      begin("P");
        S("Original");
        S("Compound");
        S("");
        S("");
      end("P");
      begin("P");
        S("Original|ApplicationVendor");
        S("KString");
        S("");
        S("");
        S("Blender Foundation");
      end("P");
      begin("P");
        S("Original|ApplicationName");
        S("KString");
        S("");
        S("");
        S("Blender (stable FBX IO)");
      end("P");
      begin("P");
        S("Original|ApplicationVersion");
        S("KString");
        S("");
        S("");
        S("2.76 (sub 0)");
      end("P");
      begin("P");
        S("Original|DateTime_GMT");
        S("DateTime");
        S("");
        S("");
        S("01/01/1970 00:00:00.000");
      end("P");
      begin("P");
        S("Original|FileName");
        S("KString");
        S("");
        S("");
        S("/foobar.fbx");
      end("P");
      begin("P");
        S("LastSaved");
        S("Compound");
        S("");
        S("");
      end("P");
      begin("P");
        S("LastSaved|ApplicationVendor");
        S("KString");
        S("");
        S("");
        S("Blender Foundation");
      end("P");
      begin("P");
        S("LastSaved|ApplicationName");
        S("KString");
        S("");
        S("");
        S("Blender (stable FBX IO)");
      end("P");
      begin("P");
        S("LastSaved|ApplicationVersion");
        S("KString");
        S("");
        S("");
        S("2.76 (sub 0)");
      end("P");
      begin("P");
        S("LastSaved|DateTime_GMT");
        S("DateTime");
        S("");
        S("");
        S("01/01/1970 00:00:00.000");
      end("P");
    end("Properties70");
  end("SceneInfo");
end("FBXHeaderExtension");
begin("FileId");
  R({0x28,0xb3,0x2a,0xeb,0xb6,0x24,0xcc,0xc2,0xbf,0xc8,0xb0,0x2a,0xa9,0x2b,0xfc,0xf1,});
end("FileId");
begin("CreationTime");
  S("1970-01-01 10:00:00:000");
end("CreationTime");
begin("Creator");
  S("Blender (stable FBX IO) - 2.76 (sub 0) - 3.6.2");
end("Creator");
begin("GlobalSettings");
  begin("Version");
    I(1000);
  end("Version");
  begin("Properties70");
    begin("P");
      S("UpAxis");
      S("int");
      S("Integer");
      S("");
      I(1);
    end("P");
    begin("P");
      S("UpAxisSign");
      S("int");
      S("Integer");
      S("");
      I(1);
    end("P");
    begin("P");
      S("FrontAxis");
      S("int");
      S("Integer");
      S("");
      I(2);
    end("P");
    begin("P");
      S("FrontAxisSign");
      S("int");
      S("Integer");
      S("");
      I(1);
    end("P");
    begin("P");
      S("CoordAxis");
      S("int");
      S("Integer");
      S("");
      I(0);
    end("P");
    begin("P");
      S("CoordAxisSign");
      S("int");
      S("Integer");
      S("");
      I(1);
    end("P");
    begin("P");
      S("OriginalUpAxis");
      S("int");
      S("Integer");
      S("");
      I(-1);
    end("P");
    begin("P");
      S("OriginalUpAxisSign");
      S("int");
      S("Integer");
      S("");
      I(1);
    end("P");
    begin("P");
      S("UnitScaleFactor");
      S("double");
      S("Number");
      S("");
      D(  1.000000);
    end("P");
    begin("P");
      S("OriginalUnitScaleFactor");
      S("double");
      S("Number");
      S("");
      D(  1.000000);
    end("P");
    begin("P");
      S("AmbientColor");
      S("ColorRGB");
      S("Color");
      S("");
      D(  0.000000);
      D(  0.000000);
      D(  0.000000);
    end("P");
    begin("P");
      S("DefaultCamera");
      S("KString");
      S("");
      S("");
      S("Producer Perspective");
    end("P");
    begin("P");
      S("TimeMode");
      S("enum");
      S("");
      S("");
      I(11);
    end("P");
    begin("P");
      S("TimeSpanStart");
      S("KTime");
      S("Time");
      S("");
      L(0);
    end("P");
    begin("P");
      S("TimeSpanStop");
      S("KTime");
      S("Time");
      S("");
      L(46186158000);
    end("P");
    begin("P");
      S("CustomFrameRate");
      S("double");
      S("Number");
      S("");
      D( 24.000000);
    end("P");
  end("Properties70");
end("GlobalSettings");
begin("Documents");
  begin("Count");
    I(1);
  end("Count");
  begin("Document");
    L(860982320);
    S("Scene");
    S("Scene");
    begin("Properties70");
      begin("P");
        S("SourceObject");
        S("object");
        S("");
        S("");
      end("P");
      begin("P");
        S("ActiveAnimStackName");
        S("KString");
        S("");
        S("");
        S("");
      end("P");
    end("Properties70");
    begin("RootNode");
      L(0);
    end("RootNode");
  end("Document");
end("Documents");
begin("References");
end("References");
begin("Definitions");
  begin("Version");
    I(100);
  end("Version");
  begin("Count");
    I(4);
  end("Count");
  begin("ObjectType");
    S("GlobalSettings");
    begin("Count");
      I(1);
    end("Count");
  end("ObjectType");
  begin("ObjectType");
    S("Geometry");
    begin("Count");
      I(1);
    end("Count");
    begin("PropertyTemplate");
      S("FbxMesh");
      begin("Properties70");
        begin("P");
          S("Color");
          S("ColorRGB");
          S("Color");
          S("");
          D(  0.800000);
          D(  0.800000);
          D(  0.800000);
        end("P");
        begin("P");
          S("BBoxMin");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("BBoxMax");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("Primary Visibility");
          S("bool");
          S("");
          S("");
          I(1);
        end("P");
        begin("P");
          S("Casts Shadows");
          S("bool");
          S("");
          S("");
          I(1);
        end("P");
        begin("P");
          S("Receive Shadows");
          S("bool");
          S("");
          S("");
          I(1);
        end("P");
      end("Properties70");
    end("PropertyTemplate");
  end("ObjectType");
  begin("ObjectType");
    S("Model");
    begin("Count");
      I(1);
    end("Count");
    begin("PropertyTemplate");
      S("FbxNode");
      begin("Properties70");
        begin("P");
          S("QuaternionInterpolate");
          S("enum");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationOffset");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("RotationPivot");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("ScalingOffset");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("ScalingPivot");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("TranslationActive");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("TranslationMin");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("TranslationMax");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("TranslationMinX");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("TranslationMinY");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("TranslationMinZ");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("TranslationMaxX");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("TranslationMaxY");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("TranslationMaxZ");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationOrder");
          S("enum");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationSpaceForLimitOnly");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationStiffnessX");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("RotationStiffnessY");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("RotationStiffnessZ");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("AxisLen");
          S("double");
          S("Number");
          S("");
          D( 10.000000);
        end("P");
        begin("P");
          S("PreRotation");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("PostRotation");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("RotationActive");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationMin");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("RotationMax");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("RotationMinX");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationMinY");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationMinZ");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationMaxX");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationMaxY");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("RotationMaxZ");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("InheritType");
          S("enum");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("ScalingActive");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("ScalingMin");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("ScalingMax");
          S("Vector3D");
          S("Vector");
          S("");
          D(  1.000000);
          D(  1.000000);
          D(  1.000000);
        end("P");
        begin("P");
          S("ScalingMinX");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("ScalingMinY");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("ScalingMinZ");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("ScalingMaxX");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("ScalingMaxY");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("ScalingMaxZ");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("GeometricTranslation");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("GeometricRotation");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("GeometricScaling");
          S("Vector3D");
          S("Vector");
          S("");
          D(  1.000000);
          D(  1.000000);
          D(  1.000000);
        end("P");
        begin("P");
          S("MinDampRangeX");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MinDampRangeY");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MinDampRangeZ");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MaxDampRangeX");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MaxDampRangeY");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MaxDampRangeZ");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MinDampStrengthX");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MinDampStrengthY");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MinDampStrengthZ");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MaxDampStrengthX");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MaxDampStrengthY");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("MaxDampStrengthZ");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("PreferedAngleX");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("PreferedAngleY");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("PreferedAngleZ");
          S("double");
          S("Number");
          S("");
          D(  0.000000);
        end("P");
        begin("P");
          S("LookAtProperty");
          S("object");
          S("");
          S("");
        end("P");
        begin("P");
          S("UpVectorProperty");
          S("object");
          S("");
          S("");
        end("P");
        begin("P");
          S("Show");
          S("bool");
          S("");
          S("");
          I(1);
        end("P");
        begin("P");
          S("NegativePercentShapeSupport");
          S("bool");
          S("");
          S("");
          I(1);
        end("P");
        begin("P");
          S("DefaultAttributeIndex");
          S("int");
          S("Integer");
          S("");
          I(-1);
        end("P");
        begin("P");
          S("Freeze");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("LODBox");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("Lcl Translation");
          S("Lcl Translation");
          S("");
          S("A");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("Lcl Rotation");
          S("Lcl Rotation");
          S("");
          S("A");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("Lcl Scaling");
          S("Lcl Scaling");
          S("");
          S("A");
          D(  1.000000);
          D(  1.000000);
          D(  1.000000);
        end("P");
        begin("P");
          S("Visibility");
          S("Visibility");
          S("");
          S("A");
          D(  1.000000);
        end("P");
        begin("P");
          S("Visibility Inheritance");
          S("Visibility Inheritance");
          S("");
          S("");
          I(1);
        end("P");
      end("Properties70");
    end("PropertyTemplate");
  end("ObjectType");
  begin("ObjectType");
    S("Material");
    begin("Count");
      I(1);
    end("Count");
    begin("PropertyTemplate");
      S("FbxSurfacePhong");
      begin("Properties70");
        begin("P");
          S("ShadingModel");
          S("KString");
          S("");
          S("");
          S("Phong");
        end("P");
        begin("P");
          S("MultiLayer");
          S("bool");
          S("");
          S("");
          I(0);
        end("P");
        begin("P");
          S("EmissiveColor");
          S("Color");
          S("");
          S("A");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("EmissiveFactor");
          S("Number");
          S("");
          S("A");
          D(  1.000000);
        end("P");
        begin("P");
          S("AmbientColor");
          S("Color");
          S("");
          S("A");
          D(  0.200000);
          D(  0.200000);
          D(  0.200000);
        end("P");
        begin("P");
          S("AmbientFactor");
          S("Number");
          S("");
          S("A");
          D(  1.000000);
        end("P");
        begin("P");
          S("DiffuseColor");
          S("Color");
          S("");
          S("A");
          D(  0.800000);
          D(  0.800000);
          D(  0.800000);
        end("P");
        begin("P");
          S("DiffuseFactor");
          S("Number");
          S("");
          S("A");
          D(  1.000000);
        end("P");
        begin("P");
          S("TransparentColor");
          S("Color");
          S("");
          S("A");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("TransparencyFactor");
          S("Number");
          S("");
          S("A");
          D(  0.000000);
        end("P");
        begin("P");
          S("Opacity");
          S("Number");
          S("");
          S("A");
          D(  1.000000);
        end("P");
        begin("P");
          S("NormalMap");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("Bump");
          S("Vector3D");
          S("Vector");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("BumpFactor");
          S("double");
          S("Number");
          S("");
          D(  1.000000);
        end("P");
        begin("P");
          S("DisplacementColor");
          S("ColorRGB");
          S("Color");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("DisplacementFactor");
          S("double");
          S("Number");
          S("");
          D(  1.000000);
        end("P");
        begin("P");
          S("VectorDisplacementColor");
          S("ColorRGB");
          S("Color");
          S("");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("VectorDisplacementFactor");
          S("double");
          S("Number");
          S("");
          D(  1.000000);
        end("P");
        begin("P");
          S("SpecularColor");
          S("Color");
          S("");
          S("A");
          D(  0.200000);
          D(  0.200000);
          D(  0.200000);
        end("P");
        begin("P");
          S("SpecularFactor");
          S("Number");
          S("");
          S("A");
          D(  1.000000);
        end("P");
        begin("P");
          S("Shininess");
          S("Number");
          S("");
          S("A");
          D( 20.000000);
        end("P");
        begin("P");
          S("ShininessExponent");
          S("Number");
          S("");
          S("A");
          D( 20.000000);
        end("P");
        begin("P");
          S("ReflectionColor");
          S("Color");
          S("");
          S("A");
          D(  0.000000);
          D(  0.000000);
          D(  0.000000);
        end("P");
        begin("P");
          S("ReflectionFactor");
          S("Number");
          S("");
          S("A");
          D(  1.000000);
        end("P");
      end("Properties70");
    end("PropertyTemplate");
  end("ObjectType");
end("Definitions");
begin("Objects");
  begin("Geometry");
    L(215830233);
    S("Cube\x00\x01Geometry", 14);
    S("Mesh");
    begin("Properties70");
    end("Properties70");
    begin("GeometryVersion");
      I(124);
    end("GeometryVersion");
    begin("Vertices");
      d(nullptr, 0);
    end("Vertices");
    begin("PolygonVertexIndex");
      i(nullptr, 0);
    end("PolygonVertexIndex");
    begin("Edges");
      i(nullptr, 0);
    end("Edges");
    begin("LayerElementNormal");
      I(0);
      begin("Version");
        I(101);
      end("Version");
      begin("Name");
        S("");
      end("Name");
      begin("MappingInformationType");
        S("ByPolygonVertex");
      end("MappingInformationType");
      begin("ReferenceInformationType");
        S("Direct");
      end("ReferenceInformationType");
      begin("Normals");
        d(nullptr, 0);
      end("Normals");
    end("LayerElementNormal");
    begin("LayerElementMaterial");
      I(0);
      begin("Version");
        I(101);
      end("Version");
      begin("Name");
        S("");
      end("Name");
      begin("MappingInformationType");
        S("AllSame");
      end("MappingInformationType");
      begin("ReferenceInformationType");
        S("IndexToDirect");
      end("ReferenceInformationType");
      begin("Materials");
        i(nullptr, 0);
      end("Materials");
    end("LayerElementMaterial");
    begin("Layer");
      I(0);
      begin("Version");
        I(100);
      end("Version");
      begin("LayerElement");
        begin("Type");
          S("LayerElementNormal");
        end("Type");
        begin("TypedIndex");
          I(0);
        end("TypedIndex");
      end("LayerElement");
      begin("LayerElement");
        begin("Type");
          S("LayerElementMaterial");
        end("Type");
        begin("TypedIndex");
          I(0);
        end("TypedIndex");
      end("LayerElement");
    end("Layer");
  end("Geometry");
  begin("Model");
    L(511284486);
    S("Cube\x00\x01Model", 11);
    S("Mesh");
    begin("Version");
      I(232);
    end("Version");
    begin("Properties70");
      begin("P");
        S("Lcl Rotation");
        S("Lcl Rotation");
        S("");
        S("A");
        D(-90.000009);
        D(  0.000000);
        D(  0.000000);
      end("P");
      begin("P");
        S("Lcl Scaling");
        S("Lcl Scaling");
        S("");
        S("A");
        D(100.000000);
        D(100.000000);
        D(100.000000);
      end("P");
      begin("P");
        S("DefaultAttributeIndex");
        S("int");
        S("Integer");
        S("");
        I(0);
      end("P");
      begin("P");
        S("InheritType");
        S("enum");
        S("");
        S("");
        I(1);
      end("P");
    end("Properties70");
    begin("MultiLayer");
      I(0);
    end("MultiLayer");
    begin("MultiTake");
      I(0);
    end("MultiTake");
    begin("Shading");
      C(true);
    end("Shading");
    begin("Culling");
      S("CullingOff");
    end("Culling");
  end("Model");
  begin("Material");
    L(679977183);
    S("Material\x00\x01Material", 18);
    S("");
    begin("Version");
      I(102);
    end("Version");
    begin("ShadingModel");
      S("Phong");
    end("ShadingModel");
    begin("MultiLayer");
      I(0);
    end("MultiLayer");
    begin("Properties70");
      begin("P");
        S("EmissiveColor");
        S("Color");
        S("");
        S("A");
        D(  0.800000);
        D(  0.800000);
        D(  0.800000);
      end("P");
      begin("P");
        S("EmissiveFactor");
        S("Number");
        S("");
        S("A");
        D(  0.000000);
      end("P");
      begin("P");
        S("AmbientColor");
        S("Color");
        S("");
        S("A");
        D(  0.000000);
        D(  0.000000);
        D(  0.000000);
      end("P");
      begin("P");
        S("DiffuseColor");
        S("Color");
        S("");
        S("A");
        D(  0.800000);
        D(  0.800000);
        D(  0.800000);
      end("P");
      begin("P");
        S("DiffuseFactor");
        S("Number");
        S("");
        S("A");
        D(  0.800000);
      end("P");
      begin("P");
        S("TransparentColor");
        S("Color");
        S("");
        S("A");
        D(  1.000000);
        D(  1.000000);
        D(  1.000000);
      end("P");
      begin("P");
        S("SpecularColor");
        S("Color");
        S("");
        S("A");
        D(  1.000000);
        D(  1.000000);
        D(  1.000000);
      end("P");
      begin("P");
        S("SpecularFactor");
        S("Number");
        S("");
        S("A");
        D(  0.250000);
      end("P");
      begin("P");
        S("Shininess");
        S("Number");
        S("");
        S("A");
        D(  9.607843);
      end("P");
      begin("P");
        S("ShininessExponent");
        S("Number");
        S("");
        S("A");
        D(  9.607843);
      end("P");
      begin("P");
        S("ReflectionColor");
        S("Color");
        S("");
        S("A");
        D(  1.000000);
        D(  1.000000);
        D(  1.000000);
      end("P");
      begin("P");
        S("ReflectionFactor");
        S("Number");
        S("");
        S("A");
        D(  0.000000);
      end("P");
    end("Properties70");
  end("Material");
end("Objects");
begin("Connections");
  begin("C");
    S("OO");
    L(511284486);
    L(0);
  end("C");
  begin("C");
    S("OO");
    L(215830233);
    L(511284486);
  end("C");
  begin("C");
    S("OO");
    L(679977183);
    L(511284486);
  end("C");
end("Connections");
begin("Takes");
  begin("Current");
    S("");
  end("Current");
end("Takes");
    }

    const std::vector<uint8_t> &bytes() { return bytes_; }

  private:

    struct node {
      size_t offset;
      uint32_t num_properties;
      size_t property_list_len;
      size_t property_list_start;
      const char *name;
    };

    std::vector<uint8_t> bytes_;
    std::vector<node> nodes;
    bool just_ended = false;

    void u1(int value) {
      bytes_.push_back((uint8_t)value);
    }

    void u2(int value) {
      u1(value);
      u1(value>>8);
    }

    void u4(int value) {
      u2(value);
      u2(value>>16);
    }

    void u8(uint64_t value) {
      u4((int)value);
      u4((int)(value>>32));
    }

    void begin(const char *name) {
      just_ended = false;
      printf("begin %x %s\n", (unsigned)bytes_.size(), name);

      node n = {};
      n.offset = bytes_.size();
      n.name = name;

      u4(0);
      u4(0);
      u4(0);
      u1((int)strlen(name));
      while (*name) u1(*name++);

      n.property_list_start = bytes_.size();
      nodes.push_back(n);
    }

    void nullnode() {
      for (int i = 0; i != 13; ++i) bytes_.push_back(0);
    }

    void end(const char *name) {
      node &n = nodes.back();
      if (just_ended || n.property_list_start == bytes_.size()) {
      //if (just_ended) {
        nullnode();
      }
      uint32_t offset = (uint32_t)n.offset;
      uint32_t end_offset = (uint32_t)bytes_.size();
      bytes_[offset+0] = (uint8_t)(end_offset >> 0);
      bytes_[offset+1] = (uint8_t)(end_offset >> 8);
      bytes_[offset+2] = (uint8_t)(end_offset >> 16);
      bytes_[offset+3] = (uint8_t)(end_offset >> 24);
      bytes_[offset+4] = (uint8_t)(n.num_properties >> 0);
      bytes_[offset+5] = (uint8_t)(n.num_properties >> 8);
      bytes_[offset+6] = (uint8_t)(n.num_properties >> 16);
      bytes_[offset+7] = (uint8_t)(n.num_properties >> 24);
      bytes_[offset+8] = (uint8_t)(n.property_list_len >> 0);
      bytes_[offset+9] = (uint8_t)(n.property_list_len >> 8);
      bytes_[offset+10] = (uint8_t)(n.property_list_len >> 16);
      bytes_[offset+11] = (uint8_t)(n.property_list_len >> 24);

      if (strcmp(name, n.name)) {
        throw std::runtime_error("non-matching end");
      }
      nodes.pop_back();
      just_ended = true;

    }

    void prop(char code) {
      node &node = nodes.back();
      node.num_properties++;
      u1(code);
    }

    void propend() {
      node &node = nodes.back();
      node.property_list_len = bytes_.size() - node.property_list_start;
    }

    void Y(int value) {
      prop('Y');
      u2(value);
      propend();
    }

    void C(int value) {
      prop('C');
      u1(value);
      propend();
    }

    void I(int value) {
      prop('I');
      u4(value);
      propend();
    }

    void F(double value) {
      prop('F');
      union { float f; int v; } u;
      u.f = (float)value;
      u4(u.v);
      propend();
    }

    void D(double value) {
      prop('D');
      union { double f; uint64_t v; } u;
      u.f = value;
      u8(u.v);
      propend();
    }

    void L(uint64_t value) {
      prop('L');
      u8(value);
      propend();
    }

    void f(const float *value, size_t size) {
      prop('f');
      u4((int)size);
      union { float f; int v; } u;
      while (size--) {
        u.f = *value++;
        u4(u.v);
      }
      propend();
    }

    void d(const double *value, size_t size) {
      prop('d');
      u4((int)size);
      union { double f; uint64_t v; } u;
      while (size--) {
        u.f = *value++;
        u8(u.v);
      }
      propend();
    }

    void l(const uint64_t *value, size_t size) {
      prop('l');
      u4((int)size);
      while (size--) {
        u8(*value++);
      }
      propend();
    }

    void i(const uint32_t *value, size_t size) {
      prop('i');
      u4((int)size);
      while (size--) {
        u4(*value++);
      }
      propend();
    }

    void b(const int *value, size_t size) {
      prop('b');
      u4((int)size);
      while (size--) {
        u4(*value++);
      }
      propend();
    }

    void S(const char *value) {
      size_t size = strlen(value);
      S(value, size);
      propend();
    }

    void S(const char *value, size_t size) {
      prop('S');
      u4((int)size);
      while (size--) {
        u1(*value++);
      }
      propend();
    }

    void R(const std::initializer_list<uint8_t> &value) {
      prop('R');
      u4((int)value.size());
      for (auto c : value) {
        u1(c);
      }
      propend();
    }
  };

}

#endif
